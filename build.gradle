//file:noinspection GroovyAssignabilityCheck
plugins {
    id "architectury-plugin" version "3.4-SNAPSHOT"
    id "dev.architectury.loom" version "1.10-SNAPSHOT" apply false
    id "com.modrinth.minotaur" version "2.+" apply false
    id "io.github.juuxel.loom-vineflower" version "1.11.0" apply false  // add vineflower, see https://github.com/Juuxel/loom-vineflower
    id 'maven-publish'
}

architectury {
    minecraft = rootProject.minecraft_version
}

subprojects {
    apply plugin: "dev.architectury.loom"
    apply plugin: "architectury-plugin"
    apply plugin: "maven-publish"

    repositories {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
        maven { url = 'https://maven.neoforged.net/releases' }
        maven { url "https://maven.fabricmc.net/" }
        maven { url "https://maven.architectury.dev/" }
    }

    base {
        archivesName = rootProject.archives_base_name + "-" + project.name
    }

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        mappings loom.layered {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-1.21.4:${rootProject.parchment_version}")
        }
        implementation "org.slf4j:slf4j-api"
        implementation "com.google.code.findbugs:jsr305:3.0.2"
    }

    tasks.withType(JavaCompile).configureEach {
        options.encoding = "UTF-8"
        options.release = 21
    }

    java {
        withSourcesJar()
        sourceCompatibility = JavaVersion.VERSION_21
        targetCompatibility = JavaVersion.VERSION_21
    }
}

allprojects {
    archives_base_name = rootProject.archives_base_name
    version = "${rootProject.mod_version}+${rootProject.minecraft_version}"
    group = rootProject.maven_group
}

// From https://github.com/teddyxlandlee/end-poem-extension/blob/1.21-all/build.gradle
subprojects {
    if (System.getenv("MR_TOKEN")) {
        apply plugin: 'com.modrinth.minotaur'
        def modLoaders = project.mr_loader.toString().split(",") as List
        modrinth {
            token.set System.getenv("MR_TOKEN")
            projectId.set "U8ElprVE"
            versionNumber.set "${project.version}-${modLoaders[0]}"
            versionName.set String.format(
                    rootProject.mr_version_name_format.toString(),
                    rootProject.mr_version_game_range,
                    project.mr_loader_display,
                    rootProject.mr_version_mod_abbr,
                    rootProject.version
            )
            changelog.set rootProject.mr_version_changelog
            versionType.set rootProject.mr_version_type
            gameVersions = rootProject.mr_version_game.toString().split(",") as List
            loaders.set modLoaders
            detectLoaders.set false
            //autoAddDependsOn.set false

            dependencies {
                required.project 'architectury-api'
                if (modLoaders.contains("fabric")) {
                    required.project 'fabric-api'
                }
            }

            uploadFile.set tasks.remapJar
            additionalFiles = [tasks.remapSourcesJar]

            debugMode = System.getenv("MR_DEBUG_MODE") == '1'
        }
    }
}
