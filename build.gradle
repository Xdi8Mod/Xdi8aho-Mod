import java.time.LocalDateTime
import java.time.ZoneId
import java.time.format.DateTimeFormatter

plugins {
    id "idea"
    id "java"
    id ("architectury-plugin") version "3.4-SNAPSHOT"
    id ("dev.architectury.loom") version "1.1-SNAPSHOT"
    //id 'org.jetbrains.kotlin.jvm' version '1.6.20'
    id ("com.github.johnrengelman.shadow") version "7.1.2" apply false
    id "maven-publish"
    id 'io.github.juuxel.loom-vineflower' version '1.11.0' apply false  // add vineflower, see https://github.com/Juuxel/loom-vineflower
}

//apply from : 'https://featurehouse.github.io/resources/18/06/953b4d/e2d196c3f97701c23ca7d34ce2ed2576a86fab019e7a2009b2b94d/kff-3.3.2.gradle'
class Constant {
    static final LocalDateTime now = LocalDateTime.now(ZoneId.of('+8'))
    static final String timestamp = "${DateTimeFormatter.ofPattern("yyMMdd.HHmm").format(now)}"
}

architectury {
    minecraft = rootProject.minecraft_version
    common("forge", "fabric")
}

loom {
    accessWidenerPath = file("src/main/resources/xdi8.aw")
}

dependencies {
    // We depend on fabric loader here to use the fabric @Environment annotations and get the mixin dependencies
    // Do NOT use other classes from fabric loader
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury:${rootProject.architectury_version}"
}

allprojects {
    //if (project.name.endsWith("fake")) return;
    apply plugin: "dev.architectury.loom"
    apply plugin: "java"
    apply plugin: "architectury-plugin"
    apply plugin: "io.github.juuxel.loom-vineflower"
    apply plugin: "maven-publish"

    version = "1.18.2-2.0.0-beta2+build.${Constant.timestamp}"
    group = "top.xdi8.mod"
    archivesBaseName = "Xdi8aho-Mod"

    loom {
        silentMojangMappingsLicense()
    }

    dependencies {
        repositories {
            maven { url "https://maven.aliyun.com/repository/public" }
            maven { url "https://maven.parchmentmc.org/" }
        }

        minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
        modImplementation 'com.google.errorprone:error_prone_annotations:2.18.0'
        modImplementation "com.google.code.findbugs:jsr305:3.0.2"
        // The following line declares the mojmap mappings, you may use other mappings as well
        mappings loom.layered {
            officialMojangMappings()
            // Can we use yarn parameters?
            //it.mappings("net.fabricmc:yarn:${rootProject.yarn_version}:v2")
            it.parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:${rootProject.parchment_version}")
        }
        // The following line declares the yarn mappings you may select this one as well.
        // mappings "net.fabricmc:yarn:1.18.2+build.4:v2"
    }

    java.withSourcesJar()

    processResources {
        inputs.property version, project.version
        filesMatching(["META-INF/mods.toml", "fabric.mod.json"]) {
            expand 'version': project.version
        }
    }

    jar {
        manifest {
            attributes([
                    "Specification-Title"     : "Firefly8",
                    "Specification-Vendor"    : "Xdi8Aho Mods",
                    "Specification-Version"   : "1", // We are version 1 of ourselves
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : project.version,
                    "Implementation-Vendor"   : "QWERTY770,teddyxlandlee",
                    "Implementation-Timestamp": "${Constant.now}"
            ])
        }
        from("NOTICE.txt") {
            rename { "META-INF/NOTICE_xdi8.txt" }
        }
        from('LICENSE.txt') {
            rename { "META-INF/LICENSE_xdi8.txt" }
        }
    }

    tasks.withType(JavaCompile.class).configureEach {
        options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
        options.release = 17
    }
}

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
repositories {
    mavenCentral()
}

// Include resources generated by data generators.
//sourceSets.main.resources { srcDir 'src/generated/resources' }

subprojects {
    //if (project.name.endsWith("fake")) return;
    apply plugin: "com.github.johnrengelman.shadow"
    apply plugin: "io.github.juuxel.loom-vineflower"  // add vineflower

    architectury {
        platformSetupLoomIde()
    }

    configurations {
        common
        shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
        compileClasspath.extendsFrom common
        runtimeClasspath.extendsFrom common
    }

    loom {
        accessWidenerPath = project(":").loom.accessWidenerPath
    }

    shadowJar {
        exclude "architectury.common.json"

        configurations = [project.configurations.shadowCommon]
        classifier "dev-shadow"
    }

    remapJar {
        input.set shadowJar.archiveFile
        dependsOn shadowJar
        classifier null
    }

    jar {
        classifier "dev"
    }

    sourcesJar {
        def commonSources = project(":").sourcesJar
        dependsOn commonSources
        from commonSources.archiveFile.map { zipTree(it) }
    }

    components.java {
        withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
            skip()
        }
    }
}
