//file:noinspection GroovyAssignabilityCheck
plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentNeoForge.extendsFrom common

    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    neoForge "net.neoforged:neoforge:${rootProject.neoforge_version}"
    modApi "dev.architectury:architectury-neoforge:${rootProject.architectury_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionNeoForge')
}

processResources {
    duplicatesStrategy "exclude"
    inputs.property "version", project.version

    filesMatching("META-INF/neoforge.mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
}

sourceSets {
    main {
        resources.srcDirs file("src/main/generated")
    }
}

loom {
    runs {
        clientData {
            clientData()
            programArgs "--all", "--mod", 'firefly8'
            programArgs "--output", file("src/main/generated").getAbsolutePath()
            // programArgs "--existing", file("src/main").getAbsolutePath()
        }
    }
}
